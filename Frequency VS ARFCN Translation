#!/usr/bin/env python3
# _*_ coding: utf_8 _*_
"""
Created on Mon Dec  3 22:24:00 2018

@author: dandelion

N_REF=N_REF_Offs+(F_REF-F_REF_Offs)/(Dlta_F_Global*10**(-3))

F_REF = F_REF_Offs + Dlta_F_Global**10**(-3)*(N_REF-N_REF_Offs)

ΔFGlobal
Frequency range (MHz)	ΔFGlobal (kHz)	FREF_Offs (MHz)	NREF_Offs	Range of NREF
0 – 3000	5	0	0	0 – 599999
3000 – 24250	15	3000	600000	600000 – 2016666
24250 – 100000	60	24250.08	2016667	2016667 – 3279165

"""


# =============================================================================
# #"Calculation of 5G NR ARFCN from 5G NR frequency."
#
# F_REF=float((input("Please input the Centural Frequency(in MHz):\n")).strip())
# #print(F_REF)
#
# if F_REF<0:
#     print("the Frequency should not small than zero!\n" )
#     print("Please Try again!\n")
#     F_REF=float((input("Please input the Centural Frequency(in MHz):\n")).strip())
# elif F_REF<=3000:
#     Dlta_F_Global=5
#     F_REF_Offs=0
#     N_REF_Offs=0
#     N_REF_Range='0~599999'
# elif F_REF<=24250:
#     Dlta_F_Global=15
#     F_REF_Offs=3000
#     N_REF_Offs=600000
#     N_REF_Range='600000~2016666'
# elif F_REF<=100000:
#     Dlta_F_Global=60
#     F_REF_Offs=24250.08
#     N_REF_Offs=2016667
#     N_REF_Range='2016667~3279165'
# else:
#     print("The Frequency is out of band,Please Try again!\n")
#
# N_REF=N_REF_Offs+(F_REF-F_REF_Offs)/(Dlta_F_Global*10**(-3))
# print("The NR_ARFCN of the Frequency is:",int(N_REF))
# print("It belongs to the range:",N_REF_Range)
# =============================================================================




# =============================================================================
# "Calculation of 5G NR frequency from 5G NR ARFCN."
# N_REF=int((input("Please input the Centural NR_ARFCN(in int):\n")).strip())
# #print(F_REF)
#
# if N_REF<0:
#     print("the NR_ARFCN should not small than zero!\n" )
#     print("Please Try again!\n")
#     N_REF=int((input("Please input the NR_ARFCN(in int):\n")).strip())
# elif N_REF<=599999:
#     Dlta_F_Global=5
#     F_REF_Offs=0
#     N_REF_Offs=0
#     F_REF_Range='0~3000'
# elif N_REF<=2016666:
#     Dlta_F_Global=15
#     F_REF_Offs=3000
#     N_REF_Offs=600000
#     F_REF_Range='3000~24250'
# elif N_REF<=3279165:
#     Dlta_F_Global=60
#     F_REF_Offs=24250.08
#     N_REF_Offs=2016667
#     F_REF_Range='24250~100000'
# else:
#     print("The Frequency is out of band,Please Try again!\n")
#
# F_REF = F_REF_Offs + Dlta_F_Global*10**(-3)*(N_REF-N_REF_Offs)
# print("The the Frequency of NR_ARFCN is:",F_REF)
# print("It belongs to the range:",F_REF_Range)
# =============================================================================


#"Calculation of 5G NR ARFCN from 5G NR frequency."
def NR_ARFCN_Calculate(F_REF):
    if F_REF<=3000:
        Dlta_F_Global=5
        F_REF_Offs=0
        N_REF_Offs=0
        N_REF_Range='0~599999'
    elif F_REF<=24250:
        Dlta_F_Global=15
        F_REF_Offs=3000
        N_REF_Offs=600000
        N_REF_Range='600000~2016666'
    else:
        Dlta_F_Global=60
        F_REF_Offs=24250.08
        N_REF_Offs=2016667
        N_REF_Range='2016667~3279165'
    N_REF=N_REF_Offs+(F_REF-F_REF_Offs)/(Dlta_F_Global*10**(-3))
    return int(N_REF),N_REF_Range


def FREQUENCY_to_NR_ARFCN():
    while True:
        try:
            Frequency=input("Please input the Frequency between (0,100000]MHz:\n")
            Frequency=float(Frequency)
            if 0<Frequency<=100000:
                NR_ARFCN,NR_ARFCN_Range=NR_ARFCN_Calculate(Frequency)
                print("The NR_ARFCN of the Frequency is:",NR_ARFCN)
                print("It belongs to the range:",NR_ARFCN_Range)
                break
            else:
                print("The input value should be between (0,100000].Try again!")
        except:
            print("Invalid input,Value should be between (0,100000]MHz,Try again!")




if __name__=="__main__":
    print("input 0 for:FREQUENCY_to_NR_ARFCN Calculate!")
    print("input 1 for:NR_ARFCN_to_FREQUENCY_to Calculate!")
    flag=int((input("Input your choice:")).strip())
    if flag==0:
        FREQUENCY_to_NR_ARFCN()
    else:
#        NR_ARFCN_to_FREQUENCY()
        pass
